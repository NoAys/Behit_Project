<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="com.behit.approval.dao.ApprovalDAO">

<select id="approval_write_go" parameterType="String" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT 
				e.emp_name,
		    d.emp_dept_name AS 'dept_name',
		    cc_grade.common_code_name AS 'grade_name',
		    cc_position.common_code_name AS 'position_name',
		    NOW() AS 'apv_date'
		FROM 
		    employee e
		    JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		    JOIN commons_code cc_position ON cc_position.common_code_idx = e.emp_position_idx
		    JOIN commons_code cc_grade ON cc_grade.common_code_idx = e.emp_grade_idx
		    WHERE e.emp_id = #{emp_id}
	</select>
	
	<select id="commute_history" parameterType="com.behit.employee.dto.WorkDTO">
		SELECT * FROM commute_history WHERE emp_id = #{emp_id} AND work_day = #{apv_start_day}
	</select>
	<insert id="alarm" parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT into alarm (
		emp_id, alarm_type, alarm_type_idx, alarm_msg, alarm_date, alarm_readCheck) 
		VALUES (#{apv_approver}, 3, #{apv_idx}, CONCAT('결재하실 문서 [', LEFT(#{apv_subject}, 20), '...] 가 도착했습니다.'), current_timestamp, "N"); 
	</insert>
	
	<!-- 결재상신 -->
	<!-- generatedKey 사용
		 useGeneratedKeys="true" : 사용 여부 
		 keyColumn="idx" : 어떤 컬럼 값을 가져와서 
		 keyProperty="idx" : DTO 의 어떤 속성(필드) 에 넣을 것인가?
	 -->
	 <insert useGeneratedKeys="true" keyColumn="apv_idx"
		keyProperty="apv_idx" id="approval_write_vac"
		parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT INTO apv(
        emp_id,
        apv_code,
        apv_date,
        apv_stmt,
        apv_subject,
        apv_vac_type,
        apv_time,
        apv_start_day,
        apv_end_day,
        apv_start_time,
        apv_end_time,
        apv_cnt
    )
    VALUES(
        #{emp_id},
        #{apv_code},
        NOW(),
        #{apv_stmt},
        #{apv_subject},
        #{apv_vac_type},
        <if test="apv_time != null and !apv_time.isEmpty()">#{apv_time},</if>
				<if test="apv_time == null or apv_time.isEmpty()">NULL,</if>
				
        <if test="apv_start_day != null and !apv_start_day.isEmpty()">#{apv_start_day},</if>
				<if test="apv_start_day == null or apv_start_day.isEmpty()">NULL,</if>
				
				<if test="apv_end_day != null and !apv_end_day.isEmpty()">#{apv_end_day},</if>
				<if test="apv_end_day == null or apv_end_day.isEmpty()">NULL,</if>
				
				<if test="apv_start_time != null and !apv_start_time.isEmpty()">#{apv_start_time},</if>
				<if test="apv_start_time == null or apv_start_time.isEmpty()">NULL,</if>
				
				<if test="apv_end_time != null and !apv_end_time.isEmpty()">#{apv_end_time},</if>
				<if test="apv_end_time == null or apv_end_time.isEmpty()">NULL,</if>
				
				<if test="apv_cnt != null and !apv_cnt.isEmpty()">#{apv_cnt}</if>
				<if test="apv_cnt == null or apv_cnt.isEmpty()">'false'</if>
    )
	</insert>
	<insert useGeneratedKeys="true" keyColumn="apv_idx"
		keyProperty="apv_idx" id="approval_write_biz"
		parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT INTO apv(
			emp_id
			,apv_code
			,apv_date
			,apv_stmt
			,apv_subject
			,apv_overview
			,apv_cnt
		)
		VALUES(
		#{emp_id}
		,#{apv_code}
		,NOW()
		,#{apv_stmt}
		<if test="apv_subject != null and !apv_subject.isEmpty()">,#{apv_subject}</if>
		<if test="apv_subject == null or apv_subject.isEmpty()">,NULL</if>
		
		<if test="apv_overview != null and !apv_overview.isEmpty()">,#{apv_overview}</if>
		<if test="apv_overview == null or apv_overview.isEmpty()">,NULL</if>
		
		<if test="apv_cnt != null and !apv_cnt.isEmpty()">,#{apv_cnt}</if>
		<if test="apv_cnt == null or apv_cnt.isEmpty()">,'false'</if>
		)
	</insert>
	<insert id="apv_line" parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT INTO apv_line(
			apv_idx
			,emp_id
			,apv_line
			,emp_id_in
			,apv_line_date
			,apv_line_up
			,apv_line_date_up
		)
		VALUES(
		#{apv_idx}
		,#{emp_id}
		,#{apv_line}
		,#{emp_id_in}
		,NOW()
		,#{emp_id_in}
		,NOW()
		)
	</insert>
	
	<delete id="apv_line_del">
		DELETE FROM apv_line WHERE apv_idx = #{apv_idx};
	</delete>
	
	<update id="apv_approver">
		UPDATE apv SET apv_approver = #{apv_approver} WHERE apv_idx = #{apv_idx}
	</update>
	<select id="apv_line_sel" resultType="String">
		SELECT emp_id
		FROM apv_line
		WHERE apv_line = (SELECT apv_line + 1 FROM apv_line WHERE apv_idx = #{apv_idx} AND emp_id = #{apv_approver})
		AND apv_idx = #{apv_idx}
	</select>
	<select id="apv_history_date" resultType="String">
		SELECT apv_history_date FROM apv_history WHERE apv_idx = #{apv_idx} 
		ORDER BY apv_history_date DESC LIMIT 1
	</select>
	<update id="apv_update">
		UPDATE apv SET apv_stmt = #{apv_stmt} WHERE apv_idx = #{apv_idx}
	</update>
	<update id="apv_update_num">
		UPDATE apv SET apv_num = #{apv_num} WHERE apv_idx = #{apv_idx}
	</update>
	
	<!-- 임시저장 -->
	<update id="approval_update">
		UPDATE apv SET 
		apv_date = NOW()
		,apv_stmt = #{apv_stmt}
		
		<if test="apv_subject != null and !apv_subject.isEmpty()">,apv_subject = #{apv_subject}</if>
		<if test="apv_subject == null or apv_subject.isEmpty()">,apv_subject = NULL</if>
		
		<if test="apv_overview != null and !apv_overview.isEmpty()">,apv_overview = #{apv_overview}</if>
		<if test="apv_overview == null or apv_overview.isEmpty()">,apv_overview = NULL</if>
		
		,apv_vac_type = #{apv_vac_type}
		
		<if test="apv_time != null and !apv_time.isEmpty()">,apv_time = #{apv_time}</if>
		<if test="apv_time == null or apv_time.isEmpty()">,apv_time = NULL</if>
	
    <if test="apv_start_day != null and !apv_start_day.isEmpty()">, apv_start_day = #{apv_start_day}</if>
		<if test="apv_start_day == null or apv_start_day.isEmpty()">,apv_start_day = NULL</if>
	
		<if test="apv_end_day != null and !apv_end_day.isEmpty()">,apv_end_day = #{apv_end_day}</if>
		<if test="apv_end_day == null or apv_end_day.isEmpty()">,apv_end_day = NULL</if>
	
		<if test="apv_start_time != null and !apv_start_time.isEmpty()">,apv_start_time = #{apv_start_time}</if>
		<if test="apv_start_time == null or apv_start_time.isEmpty()">,apv_start_time = NULL</if>
	
		<if test="apv_end_time != null and !apv_end_time.isEmpty()">,apv_end_time = #{apv_end_time}</if>
		<if test="apv_end_time == null or apv_end_time.isEmpty()">,apv_end_time = NULL</if>
		,apv_cnt = #{apv_cnt}
		WHERE apv_idx = #{apv_idx}
	</update>
	
	<!-- 결재문서 상세보기 -->
	<select id="getApproval_detail" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT * FROM apv a WHERE a.apv_idx = #{apv_idx}
	</select>
	<select id="apv_line_stmt" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT * FROM apv_history WHERE emp_id = #{emp_id} AND apv_idx = #{apv_idx}
	</select>
	<select id="apv_history_reason" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT apv_history_stmt, apv_history_reason FROM apv_history WHERE apv_idx = #{apv_idx}
		ORDER BY apv_history_date DESC LIMIT 1
	</select>
	<select id="getApv_line" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT 
			emp_id,apv_line
		FROM apv_line 
		WHERE apv_idx = #{apv_idx}
	</select>
	<insert id="getApproval_detail_do" parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT INTO apv_history(
			apv_idx
			,apv_history_stmt
			,apv_history_date
			,apv_history_reason
			,emp_id
		)
		VALUES(
		#{apv_idx}
		,#{apv_history_stmt}
		,NOW()
		,#{apv_history_reason}
		,#{apv_approver}
		)
	</insert>
	
	<!-- vacation_history 테이블 입력 -->
	<insert id="vacation_histroy" parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT INTO vacation_history(
			emp_id
			,doc_code
			,vaca_date
			,vaca_start
			,vaca_end_time
			,use_hour
			,vaca_reason
			,emp_id_in
			,vaca_date_in
		)
		VALUES(
			#{emp_id}
			,#{doc_code}
			,#{vaca_date}
			,#{vaca_start}
			,#{vaca_end_time}
			,#{use_hour}
			,#{vaca_reason}
			,#{emp_id_in}
			,NOW()
		)
	</insert>
	
	<!-- 열람자 -->
	<!-- <insert id="apv_perm" parameterType="com.behit.approval.dto.ApprovalDTO">
		INSERT INTO apv_perm(
			apv_idx
			,emp_id
			,emp_id_in
			,apv_perm_date
		)
		VALUES(
		#{apv_idx}
		,#{emp_id}
		,#{emp_id_in}
		,NOW()
		)
	</insert> -->
	<!-- 상신취소 -->
	<update id="apv_cancel">
		UPDATE apv SET apv_stmt = '임시저장' WHERE apv_idx = #{apv_idx}
	</update>
	
	
	<!-- 리스트  -->
	<select id="getApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx,a.apv_code, a.apv_subject, a.apv_date, e.emp_name, d.emp_dept_name AS 'dept_name' , a.apv_stmt 
		FROM apv a 
		JOIN employee e ON e.emp_id = a.emp_id
		JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		WHERE apv_approver = #{emp_id} AND a.apv_stmt = '진행중'
		ORDER BY a.apv_date DESC
	</select>
	<select id="requestApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx, a.apv_code, a.apv_subject, a.apv_date, a.apv_stmt, 
       (SELECT apv_history_date
        FROM apv_history ah
        WHERE ah.apv_idx = a.apv_idx
        ORDER BY apv_history_date DESC
        LIMIT 1) as apv_history_date,
       e.emp_name, d.emp_dept_name
		FROM apv a 
		JOIN employee e ON e.emp_id = a.apv_approver 
		JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		WHERE a.emp_id = #{emp_id} AND a.apv_stmt = '진행중'
		ORDER BY a.apv_date DESC
	</select>
	
	<select id="compApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx, a.apv_code, a.apv_subject, a.apv_stmt, a.apv_date,
			(SELECT e.emp_name 
			 FROM apv_line al 
			 JOIN employee e ON e.emp_id = al.emp_id 
			 WHERE al.apv_idx = a.apv_idx 
			 ORDER BY al.apv_line DESC
			 LIMIT 1) as emp_name,
			 ah.apv_history_date 
		FROM apv_history ah 
		JOIN apv a ON ah.apv_idx = a.apv_idx 
		WHERE ah.emp_id = #{emp_id}
		ORDER BY ah.apv_history_date DESC
	</select>
	
	<select id="finishApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx, a.apv_code, a.apv_subject, a.apv_date, a.apv_stmt, d.emp_dept_name,
       (SELECT apv_history_date
        FROM apv_history ah
        WHERE ah.apv_idx = a.apv_idx
        ORDER BY apv_history_date DESC
        LIMIT 1) as apv_history_date,
       (SELECT e.emp_name 
				FROM apv_line al 
				JOIN employee e ON e.emp_id = al.emp_id 
				WHERE al.apv_idx = a.apv_idx 
				ORDER BY al.apv_line DESC
				LIMIT 1) as emp_name
		FROM apv a 
		JOIN employee e ON e.emp_id = a.apv_approver 
		JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		WHERE a.emp_id = #{emp_id} AND a.apv_stmt = '완료'
		ORDER BY apv_history_date DESC
	</select>
	
	<select id="rejectedApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx, a.apv_code, a.apv_subject, a.apv_date, a.apv_stmt, d.emp_dept_name,
       (SELECT apv_history_date
        FROM apv_history ah
        WHERE ah.apv_idx = a.apv_idx
        ORDER BY apv_history_date DESC
        LIMIT 1) as apv_history_date,
       (SELECT e.emp_name 
				FROM apv_history ah
				JOIN employee e ON e.emp_id = ah.emp_id 
				WHERE ah.apv_idx = a.apv_idx 
				ORDER BY apv_history_date DESC
    		LIMIT 1) as emp_name
		FROM apv a 
		JOIN employee e ON e.emp_id = a.apv_approver 
		JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		WHERE a.emp_id = #{emp_id} AND a.apv_stmt = '반려'
	</select>
	
	<select id="temporaryApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx,a.apv_code, a.apv_subject, a.apv_date, a.apv_stmt 
		FROM apv a 
		JOIN employee e ON e.emp_id = a.emp_id
		JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		WHERE a.emp_id = #{emp_id} AND a.apv_stmt = '임시저장'
		ORDER BY a.apv_date DESC
	</select>
	
	<select id="viewApproval_list" resultType="com.behit.approval.dto.ApprovalDTO">
		SELECT a.apv_idx, a.apv_code, a.apv_subject, a.apv_date, a.apv_stmt, d.emp_dept_name,
		(SELECT apv_history_date
		 FROM apv_history ah
		 WHERE ah.apv_idx = a.apv_idx
		 ORDER BY apv_history_date DESC
		 LIMIT 1) AS apv_history_date,
		(SELECT e.emp_name 
		FROM apv_line al 
		JOIN employee e ON e.emp_id = al.emp_id 
		WHERE al.apv_idx = a.apv_idx 
		ORDER BY al.apv_line DESC
		LIMIT 1) AS emp_name
		FROM apv a
		JOIN apv_perm ap ON ap.apv_idx = a.apv_idx
		JOIN employee e ON e.emp_id = a.apv_approver 
		JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
		WHERE ap.emp_id = #{emp_id}
		ORDER BY apv_history_date DESC
	</select>
	
	<!-- 파일 업로드 -->
	<insert id="upload" parameterType="HashMap">
		INSERT INTO file(file_kind, file_kind_idx, ori_file_name, new_file_name, emp_id)
			VALUES(#{file_kind}, #{file_kind_idx}, #{ori_file_name}, #{new_file_name}, #{login_id});	
	</insert>
	
	<select id="approval_file" resultType="util">
		SELECT * FROM file WHERE file_kind = 3 AND file_kind_idx =#{apv_idx};
	</select>
	
	<delete id="fileDel">
		DELETE FROM file WHERE file_idx = #{param1}
	</delete>
	
	<delete id="temporary_apv_del">
		DELETE FROM apv WHERE apv_idx = #{apv_idx}
	</delete>
	
	<!-- 열람자 추가/ 조회/ 삭제 -->
	<insert id="addApv_perm">
	INSERT INTO apv_perm(
			apv_idx
			,emp_id
			,emp_id_in
			,apv_perm_date
		)
		VALUES(
		#{param1}
		,#{param2}
		,#{param3}
		,NOW()
		)
	</insert>
	<select id="apvPermList" resultType="com.behit.approval.dto.ApprovalDTO">
	SELECT e.emp_id, e.emp_name, 
			(d.emp_dept_name) AS dept_name,
			(select c.common_code_name 
			FROM commons_code c 
			WHERE c.common_code_idx = e.emp_grade_idx ) AS grade_name,
			(select c.common_code_name 
			FROM commons_code c 
			WHERE c.common_code_idx = e.emp_position_idx ) AS position_name
	FROM employee e JOIN department d
	JOIN apv_perm ap ON e.emp_id = ap.emp_id 
	WHERE e.emp_dept_idx = d.emp_dept_idx AND apv_idx =#{param1}
	</select>
	<delete id="delApvPerm">
	DELETE FROM apv_perm WHERE apv_idx = #{param1} AND emp_id=#{param2}
	</delete>
	
	


</mapper>