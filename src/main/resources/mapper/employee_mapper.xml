<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="com.behit.employee.dao.EmployeeDAO">
	<insert id="join" parameterType="HashMap">
		INSERT INTO employee 
			(emp_id, emp_name, password, emp_birth, email, cp_phone, mobile_phone, address, detail_addr, emp_dept_idx, emp_position_idx, emp_grade_idx, emp_id_in, emp_id_up)
			VALUES
			(#{emp_id}, #{emp_name}, #{password}, #{emp_birth}, #{email}, #{cp_phone}, #{mobile_phone}, #{address}, #{detail_addr}, #{emp_dept_idx}, #{emp_position_idx} ,#{emp_grade_idx}, #{login_id}, #{login_id});
	</insert>
	
	<select id="eflistall" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT 
			e.emp_id, 
			e.emp_name, 
			d.emp_dept_name AS 'dept_name',
			cc_grade.common_code_name AS 'grade_name',
			cc_position.common_code_name AS 'position_name',
			COALESCE(
		        (SELECT f.ori_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
		        'default'
		    ) AS ori_file_name,
		    COALESCE(
		        (SELECT f.new_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
		        'default'
		    ) AS new_file_name
		FROM 
			employee e
			JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
			JOIN commons_code cc_position ON cc_position.common_code_idx = e.emp_position_idx
			JOIN commons_code cc_grade ON cc_grade.common_code_idx = e.emp_grade_idx
		WHERE emp_id NOT IN ('master') AND leavedate = '9999-10-10' LIMIT 10 offset #{offset};
	</select>
	
	<select id="eflist" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT 
			e.emp_id, 
			e.emp_name, 
			d.emp_dept_name AS 'dept_name',
			cc_grade.common_code_name AS 'grade_name',
			cc_position.common_code_name AS 'position_name',
			COALESCE(
		        (SELECT f.ori_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
		        'default'
		    ) AS ori_file_name,
		    COALESCE(
		        (SELECT f.new_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
		        'default'
		    ) AS new_file_name
		FROM 
			employee e
			JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
			JOIN commons_code cc_position ON cc_position.common_code_idx = e.emp_position_idx
			JOIN commons_code cc_grade ON cc_grade.common_code_idx = e.emp_grade_idx
		WHERE emp_id NOT IN ('master') AND leavedate = '9999-10-10' AND e.emp_dept_idx = #{login_dept}
		LIMIT 10 offset #{offset};
	</select>
	
	<select id="eslist" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT 
			e.emp_id, 
			e.emp_name, 
			d.emp_dept_name AS 'dept_name',
			cc_grade.common_code_name AS 'grade_name',
			cc_position.common_code_name AS 'position_name',
			COALESCE(
		        (SELECT f.ori_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
		        'default'
		    ) AS ori_file_name,
		    COALESCE(
		        (SELECT f.new_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
		        'default'
		    ) AS new_file_name
		FROM 
			employee e
			JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
			JOIN commons_code cc_position ON cc_position.common_code_idx = e.emp_position_idx
			JOIN commons_code cc_grade ON cc_grade.common_code_idx = e.emp_grade_idx
		WHERE emp_id NOT IN ('master') AND leavedate NOT IN ('9999-10-10') LIMIT 10 offset #{offset};
	</select>
	
	<select id="ftotalPage" resultType="int">
   		SELECT CEIL(COUNT(emp_id)/10) AS pages FROM employee WHERE emp_id NOT IN ('master')
   		<if test="login_dept != 2">AND emp_dept_idx = #{login_dept}</if>;
    </select>
    
    <select id="stotalPage" resultType="int">
   		SELECT CEIL(COUNT(emp_id)/#{param1}) AS pages FROM employee WHERE emp_id NOT IN ('master') AND leavedate NOT IN ('9999-10-10');
    </select>
    
    <select id="detail" resultType="com.behit.employee.dto.EmployeeDTO">
SELECT e.emp_id, e.emp_name, password, e.emp_birth, e.email, e.cp_phone, e.mobile_phone, e.hiredate, e.leavedate, e.address, e.detail_addr,
	d.emp_dept_name AS 'dept_name',
	cc_position.common_code_name AS 'position_name',
	cc_grade.common_code_name AS 'grade_name',
	e.emp_dept_idx, e.emp_position_idx, e.emp_grade_idx,
	COALESCE(
        (SELECT f.ori_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
        'default'
    ) AS ori_file_name,
    COALESCE(
        (SELECT f.new_file_name FROM file f WHERE f.file_kind = 5 AND e.emp_id = f.file_kind_idx),
        'default'
    ) AS new_file_name,
    e.login_lock
	FROM 
    employee e
	JOIN department d ON e.emp_dept_idx = d.emp_dept_idx
	JOIN commons_code cc_position ON cc_position.common_code_idx = e.emp_position_idx
	JOIN commons_code cc_grade ON cc_grade.common_code_idx = e.emp_grade_idx
	WHERE e.emp_id = #{emp_id};
	</select>
	
	<select id="HisList" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT psn_his_kind, psn_his_befoInfo, psn_his_aftrInfo, psn_his_date, category FROM personnel_history
			WHERE emp_id = #{emp_id} ORDER BY psn_his_idx DESC;
	</select>
	
	<select id="deptList" parameterType="String" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT emp_dept_idx, emp_dept_name AS dept_name
		FROM department
		ORDER BY
			CASE WHEN emp_dept_name = #{dept_name} THEN 0 ELSE 1 END,
			emp_dept_idx ASC;
	</select>
	
	<select id="positionList" parameterType="String" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT common_code_idx, common_code_name AS position_name
		FROM commons_code
		WHERE common_code_kind = 2
		ORDER BY
		  CASE WHEN common_code_name = #{position_name} THEN 0 ELSE 1 END,
		  common_code_idx;
	</select>

	<select id="gradeList" parameterType="String" resultType="com.behit.employee.dto.EmployeeDTO">
		SELECT common_code_idx, common_code_name AS grade_name
		FROM commons_code
		WHERE common_code_kind = 1
		ORDER BY
			CASE WHEN common_code_name = #{grade_name} THEN 0 ELSE 1 END,
			common_code_idx ;
	</select>	
	
	<update id="bupdate" parameterType="HashMap">
		UPDATE employee
			<set>
				<if test="emp_name != null">
					emp_name = #{emp_name}, 
				</if>
				<if test="password != null">
					password = #{password}, 
				</if>
				<if test="cp_phone != null">
					cp_phone = #{cp_phone}, 
				</if>
				<if test="mobile_phone != null">
					mobile_phone = #{mobile_phone}, 
				</if>
				<if test="emp_birth != null">
					emp_birth = #{emp_birth}, 
				</if>
				<if test="email != null">
					email = #{email}, 
				</if>
					emp_id_up = #{login_id},
					emp_date_up = NOW()
			</set>
		WHERE emp_id = #{emp_id}
	</update>
	
	<update id="dupdate" parameterType="HashMap">
		UPDATE employee
			<set>
				<if test="address != null">
					address = #{address}, 
				</if>
				<if test="detail_addr != null">
					detail_addr = #{detail_addr}, 
				</if>
				<if test="hiredate != null">
					hiredate = #{hiredate}, 
				</if>
				<if test="leavedate != null">
					leavedate = #{leavedate}, 
				</if>
					emp_id_up = #{login_id},
					emp_date_up = NOW()
			</set>
		WHERE emp_id = #{emp_id}
	</update>
	
	<update id="pupdate" parameterType="HashMap">
		UPDATE employee
			<set>
				<if test="emp_dept_idx != null">
					emp_dept_idx = #{emp_dept_idx}, 
				</if>
				<if test="emp_position_idx != null">
					emp_position_idx = #{emp_position_idx}, 
				</if>
				<if test="emp_grade_idx != null">
					emp_grade_idx = #{emp_grade_idx}, 
				</if>
					emp_id_up = #{login_id},
					emp_date_up = NOW()
			</set>
		WHERE emp_id = #{emp_id}
	</update>
	
	<insert id="bupdateHistory" parameterType="HashMap">
		INSERT INTO personnel_history (emp_id, psn_his_kind, psn_his_befoInfo, psn_his_aftrInfo, emp_id_up, category)
			VALUES
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<if test="emp_name != null">#{emp_id}, '이름 수정', #{defaultname}, #{emp_name}, #{login_id}, '기본 정보',</if>
				<if test="cp_phone != null">#{emp_id}, '사원번호 수정', #{defaultphone}, #{cp_phone}, #{login_id}, '기본 정보',</if>
				<if test="mobile_phone != null">#{emp_id}, '휴대폰번호 수정', #{defaultmobile}, #{mobile_phone}, #{login_id}, '기본 정보',</if>
				<if test="emp_birth != null">#{emp_id}, '생년월일 수정', #{defaultbirth}, #{emp_birth}, #{login_id}, '기본 정보',</if>
				<if test="email != null">#{emp_id}, '이메일 수정', #{defaultemail}, #{email}, #{login_id}, '기본 정보',</if>
			</trim>
	</insert>
	
		<insert id="dupdateHistory" parameterType="HashMap">
		INSERT INTO personnel_history (emp_id, psn_his_kind, psn_his_befoInfo, psn_his_aftrInfo, emp_id_up, category)
			VALUES
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<if test="address != null">#{emp_id}, '주소 수정', #{defaultaddr}, #{address}, #{login_id}, '상세 정보',</if>
				<if test="detail_addr != null">#{emp_id}, '상세주소 수정', #{defaultdaddr}, #{detail_addr}, #{login_id}, '상세 정보',</if>
				<if test="hiredate != null">#{emp_id}, '입사일 수정', #{defaulthiredate}, #{hiredate}, #{login_id}, '상세 정보',</if>
				<if test="leavedate != null">#{emp_id}, '퇴사일 수정', #{defaultleavedate}, #{leavedate}, #{login_id}, '상세 정보',</if>
			</trim>
	</insert>	
	
		<insert id="pupdateHistory" parameterType="HashMap">
		INSERT INTO personnel_history (emp_id, psn_his_kind, psn_his_befoInfo, psn_his_aftrInfo, emp_id_up, category)
			VALUES
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<if test="emp_dept_idx != null">#{emp_id}, '부서 수정', #{defaultdeptname}, #{dept_name}, #{login_id}, '부서 정보',</if>
				<if test="emp_position_idx != null">#{emp_id}, '직책 수정', #{defaultpositionname}, #{position_name}, #{login_id}, '부서 정보',</if>
				<if test="emp_grade_idx != null">#{emp_id}, '직급 수정', #{defaultgradename}, #{grade_name}, #{login_id}, '부서 정보',</if>
			</trim>
	</insert>
	
	<update id="chkClear" parameterType="String">
		UPDATE employee
			SET login_lock = 0
		WHERE emp_id = #{emp_id};
	</update>
	
	<insert id="defaultwork">
		INSERT INTO commute_history (emp_id, work_day, work_start_time, work_end_time)
			VALUES (#{emp_id}, #{day}, #{workstart}, #{workend});
	</insert>		
</mapper>